parallelization of
	1) red-black cells approach
	2) anti-diagonal approach (sequential, then both openmp and pthread, compare speedups)
		each anti-diagonal depends on previous anti-diagonal
			openmp
				for (over anti-diagonals)
					#pragma omp parallel
					{
						#pragma omp parallel for
						for (over pixels in anti-diagonal)
					}
			pthread
				for loop (over anti-diagonals)
					diff = 0;
					static interleaved assignment
						for loop in each thread, with step size of numOfThreads
						if done using a simple global array of diff's, false sharing.
							4 bytes for first diff, 4 bytes for second diff, and so on.
						typedef struct {float diff; char pad[60]; } thread_diff;
					pthread_barrier_wait(&barrier); // initialize in main using numOfThreads
				add per-thread local diffs, only in one thread
				check tolerance
				pthread_barrier_wait(&barrier);
compare output of parallel with sequential to ensure correctness



report
	briefly explain methodology
	results (correctness, speedups)



barrier
reduction
	per-thread local diff, then add local diff's to get global diff
time the parallel implementation, then calculate speedup
